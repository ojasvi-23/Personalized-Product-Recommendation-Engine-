# -*- coding: utf-8 -*-
"""Personalized Product Recommendation Engine

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rocAJ0B7M80x46ehZn02XKP7iBLrkkiX
"""

# Install necessary libraries
!pip install scikit-learn numpy pandas

import pandas as pd

# Create a sample dataset of products
data = {
    'product_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'product_description': [
        "Stylish blue T-shirt, perfect for casual wear.",
        "Comfortable black jeans, ideal for everyday use.",
        "Elegant red dress for special occasions.",
        "Sporty green sneakers, great for running.",
        "Classic white shirt, suitable for formal events.",
        "Casual grey hoodie, very soft and warm.",
        "Trendy denim jacket, good for all seasons.",
        "Bright yellow skirt, adds a pop of color.",
        "Professional black blazer, essential for business attire.",
        "Comfortable cotton shorts, perfect for summer."
    ]
}

products_df = pd.DataFrame(data)
print("Original Products DataFrame:")
print(products_df)
print("\n")

from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize TF-IDF Vectorizer
# min_df ignores terms that appear in too few documents
# stop_words removes common words like 'the', 'a', 'is' etc.
tfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=1)

# Fit and transform the product descriptions
tfidf_matrix = tfidf_vectorizer.fit_transform(products_df['product_description'])

print("TF-IDF Matrix Shape:", tfidf_matrix.shape)
# You can see a small part of the matrix (it's sparse, so mostly zeros)
# print(tfidf_matrix[:2].toarray())
print("\n")

from sklearn.metrics.pairwise import cosine_similarity

# Compute the cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

print("Cosine Similarity Matrix Shape:", cosine_sim.shape)
# Display a small part of the similarity matrix
print(cosine_sim[:5, :5])
print("\n")

# Create a mapping from product_id to index
product_id_to_index = {product_id: i for i, product_id in enumerate(products_df['product_id'])}
index_to_product_id = {i: product_id for i, product_id in enumerate(products_df['product_id'])}

def get_recommendations(product_id, cosine_sim_matrix, df, top_n=5):
    """
    Generates product recommendations based on content similarity.

    Args:
        product_id (int): The ID of the product for which to find recommendations.
        cosine_sim_matrix (np.array): The pre-computed cosine similarity matrix.
        df (pd.DataFrame): The DataFrame containing product information.
        top_n (int): The number of top recommendations to return.

    Returns:
        list: A list of recommended product IDs.
    """
    if product_id not in product_id_to_index:
        print(f"Product ID {product_id} not found.")
        return []

    # Get the index of the product that matches the product_id
    idx = product_id_to_index[product_id]

    # Get the pairwise similarity scores with that product
    sim_scores = list(enumerate(cosine_sim_matrix[idx]))

    # Sort the products based on the similarity scores
    # [1] means sort by the similarity score itself
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the top_n most similar products. Exclude the product itself.
    sim_scores = sim_scores[1:top_n+1]

    # Get the product indices
    product_indices = [i[0] for i in sim_scores]

    # Return the product IDs corresponding to the indices
    return [index_to_product_id[i] for i in product_indices]

# Test the recommendation engine
product_to_recommend = 1 # "Stylish blue T-shirt"
recommended_products = get_recommendations(product_to_recommend, cosine_sim, products_df, top_n=3)
print(f"Recommendations for Product ID {product_to_recommend} (\"{products_df[products_df['product_id'] == product_to_recommend]['product_description'].iloc[0]}\"):")
for rec_id in recommended_products:
    print(f"- Product ID {rec_id}: \"{products_df[products_df['product_id'] == rec_id]['product_description'].iloc[0]}\"")
print("\n")

product_to_recommend = 3 # "Elegant red dress"
recommended_products = get_recommendations(product_to_recommend, cosine_sim, products_df, top_n=3)
print(f"Recommendations for Product ID {product_to_recommend} (\"{products_df[products_df['product_id'] == product_to_recommend]['product_description'].iloc[0]}\"):")
for rec_id in recommended_products:
    print(f"- Product ID {rec_id}: \"{products_df[products_df['product_id'] == rec_id]['product_description'].iloc[0]}\"")
print("\n")

product_to_recommend = 9 # "Professional black blazer"
recommended_products = get_recommendations(product_to_recommend, cosine_sim, products_df, top_n=3)
print(f"Recommendations for Product ID {product_to_recommend} (\"{products_df[products_df['product_id'] == product_to_recommend]['product_description'].iloc[0]}\"):")
for rec_id in recommended_products:
    print(f"- Product ID {rec_id}: \"{products_df[products_df['product_id'] == rec_id]['product_description'].iloc[0]}\"")
print("\n")